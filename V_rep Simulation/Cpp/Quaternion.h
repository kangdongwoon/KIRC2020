//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File Name	: Quaternion.h
// Date			: 2018.10.14
// version		: 1.0.2
// Sumary //
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef _CQuaternion_H__
#define _CQuaternion_H__


///////////Include///////////
#include <Eigen/Eigen>

#include <math.h>

#define EPSILON 0.0000001



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Name	: CQuaternion
// Date			: 2018.10.14
// Sumary //
// Define Quaternion Class
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CQuaternion
{
// Class Define ////////////////////////////////////////////////////////////////////////////////////////////////
public:

protected:

private:

// Class Method ////////////////////////////////////////////////////////////////////////////////////////////////
public:

	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: None
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	CQuaternion()
		: _s(1.), _v(3) {

		_v[0] = 0.;
		_v[1] = 0.;
		_v[2] = 0.;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: q(CQuaternion)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	CQuaternion(const CQuaternion &q) {
		_s = q.s();
		_v = q.v();
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.10.14
	// Input		: angle(double), axis(Eigen::Vector3d&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	CQuaternion(const double angle, const Eigen::Vector3d & axis) {

		if(axis.size() != 3) {
			assert (0 && "CQuaternion::CQuaternion, size of axis != 3");
			return;
		}

		// make sure axis is a unit vector
		_v = sin(angle/2) * axis/axis.norm();
		_s = cos(angle/2);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: s_in(const double), v1(const double), v2(const double), v3(const double)
	// Output		: None
	// Sumary		: Constructor using quaternion vectors.
	//////////////////////////////////////////////////////////////////////////////////////////////////
	CQuaternion(const double s_in, const double v1, const double v2, const double v3)
		: _s(s_in), _v(3) {

		_v[0] = v1;
		_v[1] = v2;
		_v[2] = v3;
	}

	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: sgn
	// Date			: 2018.05.22
	// Input		: angle(double)
	// Output		: None
	// Sumary		: return angle`s signed.
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline double sgn (double a) {
		return (0. <= a) ? 1. : -1;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: phi(double), theta(double), psi(double)
	// Output		: None
	// Sumary		: Constructor using Enguler Orientation.
	//////////////////////////////////////////////////////////////////////////////////////////////////
	CQuaternion(double phi, double theta, double psi)
		: _s(0.), _v(3) {

		_s = 0.;

		CQuaternion Qx (cos(phi/2),   sin(phi/2), 0,            0         );
		CQuaternion Qy (cos(theta/2), 0,          sin(theta/2), 0         );
		CQuaternion Qz (cos(psi/2),   0,          0,            sin(psi/2));

		/*
		*this = Qx*Qy*Qz;
		*/

		*this = Qz*Qy*Qx;
	}



	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: Set
	// Date			: 2018.05.22
	// Input		: phi, theta, psi(double)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline void Set(double phi, double theta, double psi) {

		_s = 0.;

		static CQuaternion Qx, Qy, Qz;
		Qx.Set(cos(phi / 2), sin(phi / 2),	0,				0);
		Qy.Set(cos(theta/2), 0,				sin(theta/2),	0);
		Qz.Set(cos(psi/2),   0,				0,				sin(psi/2));

		/*
		*this = Qx*Qy*Qz;
		*/

		*this = Qz*Qy*Qx;
	}



	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: Set
	// Date			: 2018.05.22
	// Input		: w, z, y, z(const double)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline void Set(const double s_in, const double v1, const double v2, const double v3) {

		_s = s_in;

		_v[0] = v1;
		_v[1] = v2;
		_v[2] = v3;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: operator +
	// Date			: 2018.05.22
	// Input		: rhs(const CQuaternion&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline CQuaternion  operator+(const CQuaternion & rhs)const {

		CQuaternion q;
		q._s = _s + rhs._s;
		q._v = _v + rhs._v;

		return q;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: operator -
	// Date			: 2018.05.22
	// Input		: rhs(const CQuaternion&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline CQuaternion  operator-(const CQuaternion & rhs)const {

		CQuaternion q;
		q._s = _s - rhs._s;
		q._v = _v - rhs._v;

		return q;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: operator *
	// Date			: 2018.05.22
	// Input		: rhs(const CQuaternion&)
	// Output		: None
	// Sumary		: operator *
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline CQuaternion  operator*(const CQuaternion & rhs)const {

		CQuaternion q;
		q._s = _s * rhs._s - _v.dot(rhs._v);
		q._v = _s * rhs._v + rhs._s * _v + _v.cross3(rhs._v);

		return q;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: Operator /
	// Date			: 2018.05.22
	// Input		: quaternion(const CQuaternion &)
	// Output		: None
	// Sumary		: operator /
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline CQuaternion  operator/(const CQuaternion & rhs)const {

		return *this*rhs.i();
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: angle(double), axis(dVector&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline CQuaternion  conjugate()const {

		CQuaternion q;
		q._s = _s;
		q._v = -1.*_v;

		return q;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: angle(double), axis(dVector&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline double norm()const {
		return( sqrt(_s*_s + _v.dot(_v)) );
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: angle(double), axis(dVector&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline CQuaternion &unit() {

		double tmp = norm();
		if(tmp > EPSILON) {
			_s = _s/tmp;
			_v = _v/tmp;
		}
		return *this;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: angle(double), axis(dVector&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline CQuaternion  i()const {

		CQuaternion out, c = conjugate();
		out.set_s(c.s() / norm() );
		out.set_v(c.v() / norm() );
		return out;

		//return conjugate() /  norm();
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: angle(double), axis(dVector&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline double dot(const CQuaternion & q)const {
		return (_s*q._s + _v[0]*q._v[0] + _v[1]*q._v[1] + _v[2]*q._v[2]);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: angle(double), axis(dVector&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline double s() const {
		return _s;
	}			


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: angle(double), axis(dVector&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline void set_s (const double s){
		_s = s;
	}	


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: angle(double), axis(Eigen::Vector3d&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline Eigen::Vector3d v() const {
		return _v;
	}			


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: CQuaternion
	// Date			: 2018.05.22
	// Input		: angle(double), axis(dVector&)
	// Output		: None
	// Sumary		: Standard Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline void set_v (const Eigen::Vector3d & v) {
		//if(v.size() == 3) {
			_v = v;
		//}
		//else {
		//	assert (0 && "CQuaternion::set_v: input has a wrong size.");
		//}
	}		


	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Method Name	: Operator =
	// Date			: 2018.05.22
	// Input		: quaternion(const CQuaternion)
	// Output		: None
	// Sumary		: operator =
	//////////////////////////////////////////////////////////////////////////////////////////////////
	inline CQuaternion & operator = (const CQuaternion &rhs)
	{ 
		if (this != &rhs) {
			_s = rhs.s(); 
			_v = rhs.v();
		}
		return *this;
	}

protected:

private:

// Class Member ////////////////////////////////////////////////////////////////////////////////////////////////
public:

protected:
	double _s;			// CQuaternion scalar part.
	Eigen::Vector3d _v;			// CQuaternion vector part.

private:

};



inline CQuaternion  operator * (const double c, const CQuaternion & rhs) {

	CQuaternion out;
	out.set_s(rhs.s() * c);
	out.set_v(rhs.v() * c);
	return out;
}


inline CQuaternion  operator * (const CQuaternion & lhs, const double c){
	return operator*(c, lhs);
}


inline CQuaternion  operator / (const double c, const CQuaternion & rhs) {
	CQuaternion out;
	out.set_s(rhs.s() / c); 
	out.set_v(rhs.v() / c);
	return out;
}


inline CQuaternion  operator / (const CQuaternion & lhs, const double c){
	return operator / (c, lhs);
}

#endif